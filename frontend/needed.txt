import React, { createContext, useEffect, useState } from 'react';
import { ADDRESS, ABI } from '../constants/index';
import { ethers } from 'ethers';
import Router from 'next/router';
import Swal from 'sweetalert2';

interface GovernmentContextProps {
  connectWallet: () => void;
  account: string | undefined;
  setAmount: React.Dispatch<React.SetStateAction<string | undefined>>;
  Contribute: (modalRef: React.RefObject<HTMLDivElement>) => void;
  disability: boolean;
  getTotalBalance: () => void;
  totalBalance: string;
  getStakeholderBalance: () => void;
  stakeholderBalance: string;
  getContributorBalance: () => void;
  contributorBalance: string;
  getContributorStatus: () => void;
  getStakeholderStatus: () => void;
  contributorStatus: boolean;
  stakeholderStatus: boolean;
  setFormData: React.Dispatch<
    React.SetStateAction<{
      title: string;
      description: string;
      beneficiary: string;
      amount: string;
    }>
  >;
  propose: (modalRef: React.RefObject<HTMLDivElement>) => void;
  formData: {
    title: string;
    description: string;
    beneficiary: string;
    amount: string;
  };
  proposals: () => void;
  proposalsData: ProposalData[] | undefined;
  voting: (proposalId: string, vote: boolean) => void;
  payBeneficiary: (proposalId: string) => void;
  getDeployer: () => void;
  deployer: string | undefined;
}

interface ProposalData {
  id: string;
  title: string;
  description: string;
  amount: string;
  beneficiary: string;
  upVote: string;
  downVote: string;
  paid: boolean;
}

export const GOVERNANCE_CONTEXT = createContext<GovernmentContextProps | undefined>(
  undefined
);

const GovernmentProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [account, setAccount] = useState<string | undefined>();
  const [amount, setAmount] = useState<string | undefined>();
  const [disability, setDisability] = useState(false);
  const [totalBalance, setTotalBalance] = useState<string>('0');
  const [stakeholderBalance, setStakeholderBalance] = useState<string>('0');
  const [contributorBalance, setContributorBalance] = useState<string>('0');
  const [stakeholderStatus, setStakeholderStatus] = useState(false);
  const [contributorStatus, setContributorStatus] = useState(false);
  const [proposalsData, setProposalsData] = useState<ProposalData[] | undefined>();
  const [deployer, setDeployer] = useState<string | undefined>();
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    beneficiary: '',
    amount: '',
  });

  useEffect(() => {
    connectWallet();
    getDeployer();
  }, [account, deployer]);

  useEffect(() => {
    getContributorStatus();
    getStakeholderStatus();
  }, [getContributorStatus, getStakeholderStatus]);

  useEffect(() => {
    getTotalBalance();
    getStakeholderBalance();
    getContributorBalance();
    proposals();
  }, [getTotalBalance, getStakeholderBalance, getContributorBalance, proposals]);

  const connectWallet = async function () {
    try {
      if (connect) {
        const connector = await connect.request({ method: 'eth_requestAccounts' });
        setAccount(connector[0]);
        Router.push('/');
      }
    } catch (error) {
      console.log(error);
    }
  };

  const getDeployer = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(connect);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(ADDRESS, ABI, signer);
      const deployer = await contract.getDeployer();
      setDeployer(deployer);
    } catch (error) {
      console.log(error);
    }
  };

  const Contribute = async (modalRef: React.RefObject<HTMLDivElement>) => {
    try {
      if (amount && connect) {
        setDisability(true);
        const provider = new ethers.providers.Web3Provider(connect);
        const signer = provider.getSigner();
        const contract = new ethers.Contract(ADDRESS, ABI, signer);
        const parsedAmount = new ethers.utils.parseEther(amount);
        const tx = await contract.contribute({ value: parsedAmount });
        await tx.wait(1);
        setDisability(false);
        const modalElement = modalRef.current ? modalRef.current : '';
        modalElement.classList.remove('show');
        modalElement.style.display = 'none';
        Swal.fire({
          position: 'top-end',
          icon: 'success',
          text: `You have successfully contributed ${amount} ETH to the DAO`,
          showConfirmButton: true,
          timer: 4000,
        });
      } else {
        setDisability(false);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const getTotalBalance = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(connect);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(ADDRESS, ABI, signer);
      const tx = await contract.getTotalBalance();
      let balance = await tx.toString();
      balance = ethers.utils.formatUnits(balance, 'ether');
      setTotalBalance(balance);
    } catch (error) {
      console.log(error);
    }
  };

  const getStakeholderBalance = async () => {
    if (stakeholderStatus) {
      try {
        const provider = new ethers.providers.Web3Provider(connect);
        const signer = provider.getSigner();
        const contract = new ethers.Contract(ADDRESS, ABI, signer);
        const tx = await contract.getStakeholdersBalances();
        let balance = await tx.toString();
        balance = ethers.utils.formatUnits(balance, 'ether');
        setStakeholderBalance(balance);
      } catch (error) {
        console.log(error);
      }
    }
  };

  const getContributorBalance = async () => {
    if (contributorStatus) {
      try {
        const provider = new ethers.providers.Web3Provider(connect);
        const signer = provider.getSigner();
        const contract = new ethers.Contract(ADDRESS, ABI, signer);
        const tx = await contract.getContributorsBalance();
        let balance = await tx.toString();
        balance = ethers.utils.formatUnits(balance, 'ether');
        setContributorBalance(balance);
      } catch (error) {
        console.log(error);
      }
    }
  };

  const getStakeholderStatus = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(connect);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(ADDRESS, ABI, signer);
      const tx = await contract.stakeholderStatus();
      setStakeholderStatus(tx);
    } catch (error) {
      console.log(error);
    }
  };

  const getContributorStatus = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(connect);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(ADDRESS, ABI, signer);
      const tx = await contract.isContributor();
      setContributorStatus(tx);
    } catch (error) {
      console.log(error);
    }
  };

  const propose = async (modalRef: React.RefObject<HTMLDivElement>) => {
    if (stakeholderStatus) {
      try {
        setDisability(true);
        const { title, description, beneficiary, amount } = formData;
        let parsedAmount = new ethers.utils.parseEther(amount);
        const provider = new ethers.providers.Web3Provider(connect);
        const signer = provider.getSigner();
        const contract = new ethers.Contract(ADDRESS, ABI, signer);
        const propose = await contract.createProposal(
          title,
          description,
          beneficiary.trim(),
          parsedAmount
        );
        await propose.wait(1);
        setDisability(false);
        const modalElement = modalRef.current ? modalRef.current : '';
        modalElement.classList.remove('show');
        modalElement.style.display = 'none';
        Swal.fire({
          position: 'top-end',
          icon: 'success',
          text: `You have made a proposal successfully!`,
          showConfirmButton: true,
          timer: 4000,
        });
      } catch (error) {
        setDisability(false);
        console.log(error);
      }
    }
  };

  const proposals = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(connect);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(ADDRESS, ABI, signer);
      const proposals = await contract.getAllProposals();
      const data = await Promise.all(
        await proposals.map((e) => {
          let info: ProposalData = {
            id: e.id.toString(),
            title: e.title,
            description: e.description,
            amount: ethers.utils.formatEther(e.amount.toString(), 'ether'),
            beneficiary: e.beneficiary,
            upVote: e.upVote.toString(),
            downVote: e.downVotes.toString(),
            paid: e.paid,
          };
          return info;
        })
      );
      setProposalsData(data);
    } catch (error) {
      console.log(error);
    }
  };

  const voting = async (proposalId: string, vote: boolean) => {
    try {
      const provider = new ethers.providers.Web3Provider(connect);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(ADDRESS, ABI, signer);
      const tx = await contract.performVote(proposalId, vote);
      await tx.wait(1);
    } catch (error) {
      if (error.message.includes('Time has already passed')) {
        Swal.fire({
          position: 'top-end',
          icon: 'warning',
          text: `Sorry, voting time has ended`,
          showConfirmButton: true,
          timer: 4000,
        });
      } else if (error.message.includes('double voting is not allowed')) {
        Swal.fire({
          position: 'top-end',
          icon: 'warning',
          text: `You have already voted!`,
          showConfirmButton: true,
          timer: 4000,
        });
      } else {
        console.log(error);
      }
    }
  };

  const payBeneficiary = async (proposalId: string) => {
    try {
      const provider = new ethers.providers.Web3Provider(connect);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(ADDRESS, ABI, signer);
      const tx = await contract.payBeneficiary(proposalId);
      await tx.wait(1);
      Swal.fire({
        position: 'top-end',
        icon: 'success',
        text: `Payment made successfully!`,
        showConfirmButton: true,
        timer: 4000,
      });
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <GOVERNANCE_CONTEXT.Provider
      value={{
        connectWallet,
        account,
        setAmount,
        Contribute,
        disability,
        getTotalBalance,
        totalBalance,
        getStakeholderBalance,
        stakeholderBalance,
        getContributorBalance,
        contributorBalance,
        getContributorStatus,
        getStakeholderStatus,
        contributorStatus,
        stakeholderStatus,
        setFormData,
        propose,
        formData,
        proposals,
        proposalsData,
        voting,
        payBeneficiary,
        getDeployer,
        deployer,
      }}
    >
      {children}
    </GOVERNANCE_CONTEXT.Provider>
  );
};

export default GovernmentProvider;


